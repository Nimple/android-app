package de.nimple.domain;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import de.nimple.domain.Contact;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table contacts.
*/
public class ContactDao extends AbstractDao<Contact, Long> {

    public static final String TABLENAME = "contacts";

    /**
     * Properties of entity Contact.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property RowId = new Property(0, Long.class, "rowId", true, "rowId");
        public final static Property Name = new Property(1, String.class, "name", false, "name");
        public final static Property Email = new Property(2, String.class, "email", false, "email");
        public final static Property Telephone = new Property(3, String.class, "telephone", false, "telephone");
        public final static Property Website = new Property(4, String.class, "website", false, "website");
        public final static Property Street = new Property(5, String.class, "street", false, "street");
        public final static Property Postal = new Property(6, String.class, "postal", false, "postal");
        public final static Property City = new Property(7, String.class, "city", false, "city");
        public final static Property Company = new Property(8, String.class, "company", false, "company");
        public final static Property Position = new Property(9, String.class, "position", false, "position");
        public final static Property FacebookId = new Property(10, String.class, "facebookId", false, "facebookId");
        public final static Property FacebookUrl = new Property(11, String.class, "facebookUrl", false, "facebookUrl");
        public final static Property TwitterId = new Property(12, String.class, "twitterId", false, "twitterId");
        public final static Property TwitterUrl = new Property(13, String.class, "twitterUrl", false, "twitterUrl");
        public final static Property XingUrl = new Property(14, String.class, "xingUrl", false, "xingUrl");
        public final static Property LinkedinUrl = new Property(15, String.class, "linkedinUrl", false, "linkedinUrl");
        public final static Property Hash = new Property(16, String.class, "hash", false, "hash");
        public final static Property Created = new Property(17, Long.class, "created", false, "created");
        public final static Property Note = new Property(18, String.class, "note", false, "note");
    };


    public ContactDao(DaoConfig config) {
        super(config);
    }
    
    public ContactDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'contacts' (" + //
                "'rowId' INTEGER PRIMARY KEY ," + // 0: rowId
                "'name' TEXT," + // 1: name
                "'email' TEXT," + // 2: email
                "'telephone' TEXT," + // 3: telephone
                "'website' TEXT," + // 4: website
                "'street' TEXT," + // 5: street
                "'postal' TEXT," + // 6: postal
                "'city' TEXT," + // 7: city
                "'company' TEXT," + // 8: company
                "'position' TEXT," + // 9: position
                "'facebookId' TEXT," + // 10: facebookId
                "'facebookUrl' TEXT," + // 11: facebookUrl
                "'twitterId' TEXT," + // 12: twitterId
                "'twitterUrl' TEXT," + // 13: twitterUrl
                "'xingUrl' TEXT," + // 14: xingUrl
                "'linkedinUrl' TEXT," + // 15: linkedinUrl
                "'hash' TEXT," + // 16: hash
                "'created' INTEGER," + // 17: created
                "'note' TEXT);"); // 18: note
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'contacts'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Contact entity) {
        stmt.clearBindings();
 
        Long rowId = entity.getRowId();
        if (rowId != null) {
            stmt.bindLong(1, rowId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(3, email);
        }
 
        String telephone = entity.getTelephone();
        if (telephone != null) {
            stmt.bindString(4, telephone);
        }
 
        String website = entity.getWebsite();
        if (website != null) {
            stmt.bindString(5, website);
        }
 
        String street = entity.getStreet();
        if (street != null) {
            stmt.bindString(6, street);
        }
 
        String postal = entity.getPostal();
        if (postal != null) {
            stmt.bindString(7, postal);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(8, city);
        }
 
        String company = entity.getCompany();
        if (company != null) {
            stmt.bindString(9, company);
        }
 
        String position = entity.getPosition();
        if (position != null) {
            stmt.bindString(10, position);
        }
 
        String facebookId = entity.getFacebookId();
        if (facebookId != null) {
            stmt.bindString(11, facebookId);
        }
 
        String facebookUrl = entity.getFacebookUrl();
        if (facebookUrl != null) {
            stmt.bindString(12, facebookUrl);
        }
 
        String twitterId = entity.getTwitterId();
        if (twitterId != null) {
            stmt.bindString(13, twitterId);
        }
 
        String twitterUrl = entity.getTwitterUrl();
        if (twitterUrl != null) {
            stmt.bindString(14, twitterUrl);
        }
 
        String xingUrl = entity.getXingUrl();
        if (xingUrl != null) {
            stmt.bindString(15, xingUrl);
        }
 
        String linkedinUrl = entity.getLinkedinUrl();
        if (linkedinUrl != null) {
            stmt.bindString(16, linkedinUrl);
        }
 
        String hash = entity.getHash();
        if (hash != null) {
            stmt.bindString(17, hash);
        }
 
        Long created = entity.getCreated();
        if (created != null) {
            stmt.bindLong(18, created);
        }
 
        String note = entity.getNote();
        if (note != null) {
            stmt.bindString(19, note);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Contact readEntity(Cursor cursor, int offset) {
        Contact entity = new Contact( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // rowId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // email
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // telephone
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // website
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // street
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // postal
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // city
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // company
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // position
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // facebookId
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // facebookUrl
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // twitterId
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // twitterUrl
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // xingUrl
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // linkedinUrl
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // hash
            cursor.isNull(offset + 17) ? null : cursor.getLong(offset + 17), // created
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18) // note
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Contact entity, int offset) {
        entity.setRowId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setEmail(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTelephone(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setWebsite(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setStreet(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPostal(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCity(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCompany(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPosition(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setFacebookId(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setFacebookUrl(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setTwitterId(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setTwitterUrl(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setXingUrl(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setLinkedinUrl(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setHash(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setCreated(cursor.isNull(offset + 17) ? null : cursor.getLong(offset + 17));
        entity.setNote(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Contact entity, long rowId) {
        entity.setRowId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Contact entity) {
        if(entity != null) {
            return entity.getRowId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
